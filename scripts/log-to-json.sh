#!/usr/bin/env bash

EXTRACT_HOSTAPD=false
OUTPUT=""
LOGFILE=""

# Temporary variables for a single block
TIMESTAMP=""
DOMAIN_USERNAME=""
USERNAME=""
CHALLENGE=""
RESPONSE=""
JTR=""
HASHCAT=""

# Function: print usage
usage() {
    echo "Usage: $0 [ -o|--output OUTPUT FILE ]
                  [ -l LOG FILE TO PROCESS FROM ]
                  [ --extract-hostapd EXTRACT HOSTAPD LOG ]
                  [ -h|--help HELP ]" 1>&2
}

# Function: exit with error
exit_error() {
    usage
    echo "-------------"
    echo "Exiting!"
    exit 1
}

# Manual argument parsing since we have flags like --extract-hostapd
while [[ $# -gt 0 ]]
do
    if [[ "$1" == "--extract-hostapd" ]]
    then
        EXTRACT_HOSTAPD=true
        shift
    elif [[ "$1" == "-o" ]] || [[ "$1" == "--output" ]]
    then
        OUTPUT="$2"
        shift 2
    elif [[ "$1" == "-l" ]]
    then 
        LOGFILE="$2"
        shift 2
    elif [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]
    then
        usage
        exit 0
    else
        echo "Unknown option: $1"
        exit_error
    fi
done

if [[ -z "$OUTPUT" ]]
then
    exit_error
fi

# Function: extract hostapd logs into JSON
extract_hostapd() {
    # This is the log file generated by hostapd in Eaphammer. I might set an optional argument for this.
    # LOGFILE="./logs/hostapd-eaphammer.log"

    mkdir -p output

    # Reset all variables.
    # Just in case I guess.
    TIMESTAMP=""
    DOMAIN_USERNAME=""
    USERNAME=""
    CHALLENGE=""
    RESPONSE=""
    JTR=""
    HASHCAT=""

    while IFS= read -r line # Read the file line by line
    do
        # Remove leading and trailing whitespace.
        # This is done throughout this block.
        line=$(echo "$line" | xargs)

        if [[ $line == "mschapv2:"* ]]
        then
            # Reset previous block.
            TIMESTAMP="${line#mschapv2: }"
            DOMAIN_USERNAME=""
            USERNAME=""
            CHALLENGE=""
            RESPONSE=""
            JTR=""
            HASHCAT=""
        fi

        # Parse the line.
        # I could use a case, but mehhhhhh.
        if [[ $line == "domain\\username:"* ]]
        then
            DOMAIN_USERNAME=$(echo "$line" | cut -d':' -f2 | xargs)
        fi

        if [[ $line == "username:"* ]]
        then
            USERNAME=$(echo "$line" | cut -d':' -f2 | xargs)
        fi

        if [[ $line == "challenge:"* ]]
        then
            CHALLENGE=$(echo "$line" | cut -d':' -f2- | xargs)
        fi

        if [[ $line == "response:"* ]]
        then
            RESPONSE=$(echo "$line" | cut -d':' -f2- | xargs)
        fi

        if [[ $line == "jtr NETNTLM:"* ]]
        then
            JTR=$(echo "$line" | cut -d':' -f2- | xargs)
        fi

        if [[ $line == "hashcat NETNTLM:"* ]]
        then
            HASHCAT=$(echo "$line" | cut -d':' -f2- | xargs)

            # Write JSON once we reach the hashcat line
            echo "{\"timestamp\":\"$TIMESTAMP\",\"domain_username\":\"$DOMAIN_USERNAME\",\"username\":\"$USERNAME\",\"challenge\":\"$CHALLENGE\",\"response\":\"$RESPONSE\",\"jtr\":\"$JTR\",\"hashcat\":\"$HASHCAT\"}" >> output/"$OUTPUT"
        fi

    done < "$LOGFILE"
}


if [[ "$EXTRACT_HOSTAPD" == true ]]
then
    extract_hostapd
fi
